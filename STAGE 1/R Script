###Q1
#Function for translating DNA to protein
translate_dna <- function(dna_sequence) {
  # Define the codons
  codon_table <- c(
      TTT="F", TTC="F", TTA="L", TTG="L", CTT="L", CTC="L", CTA="L", CTG="L",
      ATT="I", ATC="I", ATA="I", ATG="M", GTT="V", GTC="V", GTA="V", GTG="V",
      TCT="S", TCC="S", TCA="S", TCG="S", CCT="P", CCC="P", CCA="P", CCG="P",
      ACT="T", ACC="T", ACA="T", ACG="T", GCT="A", GCC="A", GCA="A", GCG="A",
      TAT="Y", TAC="Y", TAA="STOP", TAG="STOP", CAT="H", CAC="H", CAA="Q", CAG="Q",
      AAT="N", AAC="N", AAA="K", AAG="K", GAT="D", GAC="D", GAA="E", GAG="E",
      TGT="C", TGC="C", TGA="STOP", TGG="W", CGT="R", CGC="R", CGA="R", CGG="R",
      AGT="S", AGC="S", AGA="R", AGG="R", GGT="G", GGC="G", GGA="G", GGG="G"
    )
  # Check if the sequence length is a multiple of 3
  if (nchar(dna_sequence) %% 3 != 0) {
    stop("Error: DNA sequence length is not a multiple of 3.")
  }
  # Split DNA sequence into codons (triplets)
  codons <- substring(dna_sequence, seq(1, nchar(dna_sequence), 3), seq(3, nchar(dna_sequence), 3))
  
  # Translate codons into amino acids
  protein <- sapply(codons, function(codon) codon_table[[codon]])
  
  # Stop translation at the first STOP codon
  stop_index <- which(protein == "STOP")
  if (length(stop_index) > 0) {
    protein <- protein[1:(stop_index[1] - 1)]
  }
  
  return(paste(protein, collapse = ""))
}
#Trial
DNA1 <- "AGCCCTTTTTGA"
protein1 <- translate_dna(DNA1)
print(protein1) #should return "SPF"

###Q2
#Writing a function that simulates and generates a logistic population growth curve
Logexp <- function(k,x0,x) {
  value <- (1/(1+exp(-k*(x-x0)))) #inputting formular for logistic expression
  return(value)
  }
#trial
Logexp(0.5,5,1) #Should return "0.1192029"

#Creating a dataset and plot
Logexp <- function(k,x0,x) {
  value <- (1/(1+exp(-k*(x-x0)))) #inputting formular for logistic expression
  return(value)
}
# Initialize an empty vector to store results
Population <- c()

# Loop from 0 to 24 and compute Logexp values
for(i in 0:24){
  curr_pop <- Logexp(k = 0.25, x0 = 5, x = i)
  Population <- c(Population, curr_pop) # Append the new value to correctly add new values to the vector.
}

# Print or plot the results
print(Population)

plot(x = 0:24, y = Population)

#Changing the values of K and x0 change the sigmoid curve

###Q3
#Write a function for calculating hamming distance
hamming_distance <- function(string1, string2) {
  # Check if sequences are of equal length
  if (nchar(string1) != nchar(string2)) {
    stop("Sequences must be of equal length")
  }

  # Convert strings to character vectors
  string1_chars <- strsplit(string1, "")[[1]]
  string2_chars <- strsplit(string2, "")[[1]]
  
  # Count positions where characters differ
  distance <- sum(string1_chars != string2_chars)
  
  return(distance)
}
#Trial
hamming_distance("ACTGCA","GCTCCA") #should return 2
 
